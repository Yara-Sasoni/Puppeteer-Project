const puppeteer = require('puppeteer') //gives us access to everything inside puppeteer package

describe('My First Puppeteer Test  ',  () => { //a wrapper around test steps or test suite
//inside describe we can create as many test steps as we want
    it('should launch the browser', async function() { //Describes a specification or test case with the given title and call back function acting as thunk 
        //we need to use async before function in puppeteer
        const browser = await puppeteer.launch({ headless: false, slowMo: 10, devtools: false }) //setting it to false will always open the physicl browser. true will run the test in headless mode. slowmo will slow down the brwoser so we can see the test
        const page = await browser.newPage() //to create a connection to the browser page and get access to all puppeteer methods or commands
        //heading to example.com to help teach how to visit url with puppeteer. copy url link
        await page.goto('http://example.com/') //this way we are telling the page to visit this URL
        await page.waitForTimeout(3000)
        await page.waitForSelector('h1') //to check if an element of the page is visible to make sure that the test is working and the correct page is loading
        await page.reload() //to reload the page and check if h1 is still there
        await page.waitForTimeout(3000)
        await page.waitForSelector('h1') 
        await page.wait
        await browser.close()
        //to run this code we need to create a test command in test in the package JSON first (node ./node_modules/mocha/bin/mocha --timeout=30000 ./tests)
    })
})

/////////////////////////////////////////////////////////
const puppeteer = require('puppeteer') //gives us access to everything inside puppeteer package

describe('My First Puppeteer Test  ',  () => { //a wrapper around test steps or test suite
//inside describe we can create as many test steps as we want
    it('should launch the browser', async function() { //Describes a specification or test case with the given title and call back function acting as thunk 
        //we need to use async before function in puppeteer
        const browser = await puppeteer.launch({ headless: false, slowMo: 10, devtools: false }) //setting it to false will always open the physicl browser. true will run the test in headless mode. slowmo will slow down the brwoser so we can see the test
        const page = await browser.newPage() //to create a connection to the browser page and get access to all puppeteer methods or commands
        //heading to example.com to help teach how to visit url with puppeteer. copy url link
        await page.goto('http://example.com/') //this way we are telling the page to visit this URL
        
        await page.waitForSelector('h1') //to check if an element of the page is visible to make sure that the test is working and the correct page is loading

        await page.goto('https://dev.to/') 
        await page.waitForSelector('#header-search') //because it is an id we need to use 3
        await page.goBack()
        await page.waitForSelector('h1')
        await page.goForward()
        await page.waitForSelector('#header-search')
        await browser.close()
        //to run this code we need to create a test command in test in the package JSON first (node ./node_modules/mocha/bin/mocha --timeout=30000 ./tests)
    })
})

//////////////////////////////////////////////////////
const puppeteer = require('puppeteer') //gives us access to everything inside puppeteer package

describe('My First Puppeteer Test  ',  () => { //a wrapper around test steps or test suite
//inside describe we can create as many test steps as we want
    it('should launch the browser', async function() { //Describes a specification or test case with the given title and call back function acting as thunk 
        //we need to use async before function in puppeteer
        const browser = await puppeteer.launch({ 
            headless: false,
            slowMo: 10,
            devtools: false,
            args: ['--start-maximized'] //to maximize the window of the browser
    }) //setting headless to false will always open the physicl browser. true will run the test in headless mode. slowmo will slow down the brwoser so we can see the test
        const page = await browser.newPage() //to create a connection to the browser page and get access to all puppeteer methods or commands
        await page.goto('https://devexpress.github.io/testcafe/example/') //this way we are telling the page to visit this URL
        await page.type('#developer-name', 'Yara', {delay: 100}) //to write in an input field we use this function. delay makes the writing slower so it writes like a human
        await page.click('#tried-test-cafe', {clickCount: 1}) //to set how many times we want to click on that button
        await page.waitForTimeout(3000)
        await page.select('#preferred-interface', 'JavaScript API')
        await page.waitForTimeout(2000)
        const message = 'Lets fill that message with some text'
        await page.type('#comments', message) //we made it as a variable instead of writing the message here
        await page.click('#submit-button')
        await page.waitForSelector('.result-content') //we use a dot before class selectors
        await page.waitForTimeout(5000)
        await browser.close()
        //to run this code we need to create a test command in test in the package JSON (node ./node_modules/mocha/bin/mocha --timeout=30000 ./tests)
    })
})
///////////////////////////////////////////////////////
await page.goto('http://example.com') //this way we are telling the page to visit this URL
        const title = await page.title()
        const url = await page.url()
        console.log('title', title)
        console.log('url', url)
        await browser.close()

//////////////////////////////////////////////////////
 const page = await browser.newPage() //to create a connection to the browser page and get access to all puppeteer methods or commands
        await page.goto('http://example.com') //this way we are telling the page to visit this URL
        const title = await page.title()
        const url = await page.url()
        const text = await page.$eval('h1', Element => Element.textContent) //to specify what we want to return, in this case the text in h1
        const count = await page.$$eval('p', Element => Element.length)
        console.log('Number of p tags: ' + count)
        console.log('Text in H1: ' + text)
        await browser.close()

////////////////////////////////////////////////////
const puppeteer = require('puppeteer') //gives us access to everything inside puppeteer package
const expect = require('chai').expect

describe('My First Puppeteer Test  ',  () => { //a wrapper around test steps or test suite
//inside describe we can create as many test steps as we want
    it( 'should launch the browser', async function() { //Describes a specification or test case with the given title and call back function acting as thunk 
        //we need to use async before function in puppeteer
        const browser = await puppeteer.launch({ 
            headless: false,
            slowMo: 10,
            devtools: false,
            defaultViewport: null,
            args: ['--start-maximized'] //to maximize the window of the browser
    }) //setting headless to false will always open the physicl browser. true will run the test in headless mode. slowmo will slow down the brwoser so we can see the test
        const page = await browser.newPage() //to create a connection to the browser page and get access to all puppeteer methods or commands
        await page.setDefaultTimeout(10000) 
        await page.setDefaultNavigationTimeout(20000)
        await page.goto('http://example.com') //this way we are telling the page to visit this URL\
        await page.waitForXPath('//h1')
        const title = await page.title()
        const url = page.url()
        const text = await page.$eval('h1', Element => Element.textContent) //to specify what we want to return, in this case the text in h1 (we use eval to extract content from element)
        const count = await page.$$eval('p', Element => Element.length) //how many paragraphs are on the page
        
        expect(title).to.be.a('string', 'Example Domain')
        expect(url).to.include('example.com')
        expect(text).to.be.a('string', 'example domain')
        expect(count).to.equal(2)

        await page.goto('http://zero.webappsecurity.com/')
        await page.waitForSelector('#searchTerm')
        await page.type('#searchTerm', 'Hello World')
        await page.keyboard.press('Enter', {delay: 10})
        await page.waitForTimeout('5000')

        await browser.close()
        //to run this code we need to create a test command in test in the package JSON (node ./node_modules/mocha/bin/mocha --timeout=30000 ./tests)

    })
})

////////////////////////////////////////////////////////////////////////////////////////////////
const puppeteer = require('puppeteer') //gives us access to everything inside puppeteer package
const expect = require('chai').expect

describe('My First Puppeteer Test  ',  () => { //a wrapper around test steps or test suite
//inside describe we can create as many test steps as we want
    let browser
    let page

    before(async function() {
        browser = await puppeteer.launch({ 
            headless: false,
            slowMo: 10,
            devtools: false,
            defaultViewport: null,
            args: ['--start-maximized'] //to maximize the window of the browser
        })
        page = await browser.newPage()
        await page.setDefaultTimeout(10000)
        await page.setDefaultNavigationTimeout(20000)
    })
    after(async function(){
        await browser.close()
    })

    it('should launch the browser', async function() { //Describes a specification or test case with the given title and call back function acting as thunk 
        await page.goto('http://example.com') //this way we are telling the page to visit this URL\
        await page.waitForXPath('//h1')
        const title = await page.title()
        const url = page.url()
        const text = await page.$eval('h1', Element => Element.textContent) //to specify what we want to return, in this case the text in h1 (we use eval to extract content from element)
        const count = await page.$$eval('p', Element => Element.length) //how many paragraphs are on the page
        
        expect(title).to.be.a('string', 'Example Domain')
        expect(url).to.include('example.com')
        expect(text).to.be.a('string', 'example domain')
        expect(count).to.equal(2)

        await page.goto('http://zero.webappsecurity.com/')
        await page.waitForSelector('#signin_button')
        await page.click('#signin_button')
        await page.waitForSelector('#signin_button', { //reverses the effect of waitfor selector so that we wait for it to disappear not appear
            hidden: true, 
            timeout: 3000,
        })
        //to run this code we need to create a test command in test in the package JSON (node ./node_modules/mocha/bin/mocha --timeout=30000 ./tests)

    })
     
 })
 //////////////////////////////////////////////////////////
